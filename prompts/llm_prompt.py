# llm_prompt.py
import json
import yaml
from pathlib import Path

SYSTEM_PROMPT = """Tu es un annotateur de n√©gation clinique rigoureux.

Objectif : √Ä partir d‚Äôune phrase + des r√®gles de n√©gation fournies (marqueurs et port√©es extraites des fichiers YAML) + le contrat LLM, produire un UNIQUE objet JSON valide (UTF-8, sans commentaire) qui contient :
- cues (avec id de r√®gle),
- scopes (texte exact + offsets char 0-based [start, end[),
- r√¥les (subject | core | support | exception),
- polarit√© globale (NEGATIVE | AFFIRMATIVE | UNCERTAIN),
- mapping cue‚Üíscope par indices.

Contraintes cruciales :
- Tu dois t‚Äôappuyer sur les r√®gles YAML donn√©es en entr√©e (10_markers et 20_scopes). Tu ne dois pas inventer d‚ÄôIDs ou de strat√©gies.
- Si une r√®gle YAML est pr√©sente dans pending_rules.rule_yaml, tu dois la relire et l‚Äôappliquer exactement.
- Si le runner a d√©j√† propos√© un scope ou un cue, garde-le en priorit√© et corrige seulement si manifestement faux.
- Respecte STRICTEMENT les offsets de caract√®res 0-based, end exclusif.
- N‚Äôinclus JAMAIS un verbe dans le cue.
- MUST_COMPLETE_MISSING : compl√®te sujet et supports si absents ; ajoute les cues manquants (id 'LLM_FALLBACK', group 'inference') si un lex√®me √©vident est pr√©sent.
- Fusionne les scopes identiques et d√©duplique les doublons.
- R√©ponds UNIQUEMENT par le JSON demand√© ; jamais de prose.
"""


def load_rules_for_groups(rules_dir: Path, groups: list[str]) -> dict:
    """Charge toutes les r√®gles YAML de 10_markers et 20_scopes pour les groupes concern√©s"""
    out = {"markers": {}, "scopes": {}}

    # 10_markers
    for g in groups:
        folder = rules_dir / "10_markers"
        rules_for_group = []
        for f in folder.glob("*.yaml"):
            if g in f.name.lower():
                try:
                    items = yaml.safe_load(f.read_text(encoding="utf-8"))
                    if isinstance(items, list):
                        rules_for_group.extend(items)
                except Exception:
                    pass
        if rules_for_group:
            out["markers"][g] = rules_for_group

    # 20_scopes
    folder = rules_dir / "20_scopes"
    for f in folder.glob("*.yaml"):
        try:
            items = yaml.safe_load(f.read_text(encoding="utf-8"))
            if isinstance(items, list):
                # garder seulement celles dont l'id correspond √† ce groupe
                filtered = [s for s in items if g in (s.get("id","").lower())]
                if filtered:
                    out["scopes"].setdefault(g, []).extend(filtered)
        except Exception:
            pass

    return out


def build_llm_prompt(obj: dict, rules_dir: str) -> tuple[str, str]:
    all_groups = []
    for c in obj.get("cues", []):
        if isinstance(c["group"], list):
            all_groups.extend(c["group"])
        else:
            all_groups.append(c["group"])

    groups = sorted(set(all_groups))
    rules_full = load_rules_for_groups(Path(rules_dir), groups)

    slim = {
        "id": obj.get("id"),
        "text": obj.get("text"),
        "cues": obj.get("cues", []),
        "scopes": obj.get("scopes", []),
        "candidates_rules_ID_cues": obj.get("candidates_rules_ID_cues", []),
        "candidates_rules_ID_scopes": obj.get("candidates_rules_ID_scopes", []),
        "llm_contract": {
            k: obj["llm_contract"][k]
            for k in ["mode","policy","rules_obligations","hints","pending_rules"]
            if k in obj.get("llm_contract", {})
        },
        "rules_full": rules_full  # üî• Ajout : contenu YAML complet
    }

    user_prompt = (
        "[CONTEXTE]\n"
        "Tu re√ßois :\n"
        "1) La phrase √† annoter\n"
        "2) Les candidats de r√®gles (IDs par groupe) + strat√©gies de scopes par groupe\n"
        "3) Le contrat LLM (politique, hints, obligations) et les pending_rules √† ex√©cuter\n"
        "4) Des exemples few-shot par famille (voir plus bas)\n\n"

        "[DONN√âES]\n" +
        json.dumps(slim, ensure_ascii=False, indent=2) + "\n"
        "  # contient:\n"
        "  # - text\n"
        "  # - cues (d√©tection d√©terministe)\n"
        "  # - scopes (propositions surface)\n"
        "  # - candidates_rules_ID_cues / candidates_rules_ID_scopes\n"
        "  # - llm_contract {policy, rules_obligations, hints, pending_rules[*].rule_yaml & cue & text}\n\n"

        "[INSTRUCTIONS]\n"
        "1) Lis et applique chaque pending_rules.rule_yaml au cue fourni (READ_AND_APPLY_RULE).\n"
        "2) Ajuste/compl√®te les scopes selon les strat√©gies indiqu√©es par groupe (registry).\n"
        "3) Ajoute les r√¥les :\n"
        "   - subject : sujet grammatical associ√© √† la n√©gation principale s‚Äôil est explicite\n"
        "   - core : pr√©dicat ou GN/GV ni√© (la ‚Äúport√©e c≈ìur‚Äù)\n"
        "   - support : source/autorit√© (‚Äúselon‚Ä¶‚Äù, ‚Äúd‚Äôapr√®s‚Ä¶‚Äù, titres √† gauche avant ‚Äò:‚Äô)\n"
        "   - exception : √©l√©ments exclusifs (‚Äú√† l‚Äôexception de‚Ä¶‚Äù, ‚Äúsauf‚Ä¶‚Äù)\n"
        "4) Fixe la polarit√© globale de la phrase (ou de l‚Äôassertion principale) : NEGATIVE / AFFIRMATIVE / UNCERTAIN.\n"
        "5) Sors un UNIQUE objet JSON conforme au SCH√âMA DE SORTIE ci-dessous.\n\n"

        "[SCH√âMA DE SORTIE ‚Äî JSON]\n"
        "{\n"
        "  \"id\": {{id_du_runner}},\n"
        "  \"text\": \"{{phrase_originale}}\",\n"
        "  \"polarity\": \"NEGATIVE|AFFIRMATIVE|UNCERTAIN\",\n"
        "  \"cues\": [\n"
        "    {\"id\": \"RULE_ID\", \"group\": \"bipartite|determinant|preposition|conjonction|lexical|locution|adversative|inference\",\n"
        "     \"cue_label\": \"forme canonique\", \"start\": int, \"end\": int}\n"
        "  ],\n"
        "  \"scopes\": [\n"
        "    {\"id\": \"STRATEGY_ID|BIP_G_CORE|DET_G_CORE|PREP_GENERIC_CORE|CONJ_NI_CORE|...\",\n"
        "     \"scope\": \"texte exact\", \"start\": int, \"end\": int, \"role\": \"subject|core|support|exception\"}\n"
        "  ],\n"
        "  \"mapping\": [\n"
        "    {\"cue_index\": 0, \"scope_indices\": [0,2]}\n"
        "  ]\n"
        "}\n\n"

        "[FEW-SHOT ‚Äî par famille]\n"
        "(Bipartite)\n"
        "- Ex.1\n"
        "  Texte : \"Le protocole n‚Äôa jamais √©t√© valid√© malgr√© plusieurs essais.\"\n"
        "  Sortie :\n"
        "  {\n"
        "    \"polarity\":\"NEGATIVE\",\n"
        "    \"cues\":[\n"
        "      {\"id\":\"NE_BIPARTITE_EXTENDED\",\"group\":\"bipartite\",\"cue_label\":\"ne jamais\",\"start\":13,\"end\":22},\n"
        "      {\"id\":\"PREP_MALGR√â\",\"group\":\"preposition\",\"cue_label\":\"malgr√©\",\"start\":34,\"end\":40}\n"
        "    ],\n"
        "    \"scopes\":[\n"
        "      {\"id\":\"BIP_G_CORE\",\"scope\":\"Le protocole\",\"start\":0,\"end\":12,\"role\":\"subject\"},\n"
        "      {\"id\":\"BIP_G_CORE\",\"scope\":\"√©t√© valid√©\",\"start\":23,\"end\":33,\"role\":\"core\"},\n"
        "      {\"id\":\"PREP_MALGR√â_CORE\",\"scope\":\"plusieurs essais\",\"start\":41,\"end\":57,\"role\":\"support\"}\n"
        "    ],\n"
        "    \"mapping\":[\n"
        "      {\"cue_index\":0,\"scope_indices\":[1]},\n"
        "      {\"cue_index\":1,\"scope_indices\":[2]}\n"
        "    ]\n"
        "  }\n"
        "- Ex.2\n"
        "  Texte : \"Le patient ne pr√©sente pas de fi√®vre.\"\n"
        "  ‚Üí cue bipartite \"ne pas\"; scopes : subject=\"Le patient\", core=\"pr√©sente ‚Ä¶ fi√®vre\" (au minimum ‚Äúfi√®vre‚Äù si tu restreins au GN ni√©). Polarit√©=NEGATIVE.\n\n"

        "(Determinant)\n"
        "- Ex.1\n"
        "  Texte : \"Aucune l√©sion n‚Äôa √©t√© retrouv√©e.\"\n"
        "  ‚Üí cue determinant \"aucune\"; scopes : subject implicite (examen/constat) souvent omis, core=\"l√©sion\". Polarit√©=NEGATIVE.\n"
        "- Ex.2\n"
        "  Texte : \"Pas d‚Äôant√©c√©dents familiaux.\"\n"
        "  ‚Üí cue determinant \"pas d‚Äô\"; core=\"ant√©c√©dents familiaux\".\n\n"

        "(Pr√©position)\n"
        "- Ex.1\n"
        "  Texte : \"Examen r√©alis√© sans complication notable.\"\n"
        "  ‚Üí cue \"sans\"; core=\"complication notable\"; subject=\"Examen\". Polarit√©=NEGATIVE.\n"
        "- Ex.2\n"
        "  Texte : \"Hors de tout contexte infectieux.\"\n"
        "  ‚Üí cue \"hors de\"; core=\"contexte infectieux\".\n\n"

        "(Conjonction ‚Äî ni ‚Ä¶ ni ‚Ä¶)\n"
        "- Ex.1\n"
        "  Texte : \"Le patient ne pr√©sente ni fi√®vre ni toux.\"\n"
        "  ‚Üí cues \"ne ‚Ä¶\" (bipartite) + \"ni\" (conj) ; cores multiples \"fi√®vre\", \"toux\"; subject=\"Le patient\".\n"
        "- Ex.2\n"
        "  Texte : \"Ni douleur, ni ≈ìd√®me.\"\n"
        "  ‚Üí cores : \"douleur\", \"≈ìd√®me\".\n\n"

        "(Lexical)\n"
        "- Ex.1\n"
        "  Texte : \"Traitement inefficace.\"\n"
        "  ‚Üí cue lexical \"inefficace\"; core=\"Traitement\"; polarit√©=NEGATIVE (√©chec).\n"
        "- Ex.2\n"
        "  Texte : \"R√©sultat non concluant.\"\n"
        "  ‚Üí cue lexical \"non\"; core=\"concluant\" (ou \"r√©sultat non concluant\").\n\n"

        "(Locution / Exception)\n"
        "- Ex.1\n"
        "  Texte : \"√Ä l‚Äôexception de la fi√®vre, tout est normal.\"\n"
        "  ‚Üí cue \"√† l‚Äôexception de\"; role=exception pour \"la fi√®vre\"; polarit√© AFFIRMATIVE globale mais exception marqu√©e.\n"
        "- Ex.2\n"
        "  Texte : \"Sauf saignement actif.\"\n"
        "  ‚Üí cue \"sauf\"; exception=\"saignement actif\".\n\n"

        "[FIN ‚Äî RENDS UNIQUEMENT LE JSON DU SCH√âMA]\n"
    )

    return SYSTEM_PROMPT, user_prompt
